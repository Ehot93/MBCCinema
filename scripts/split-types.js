#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Read the generated API types file
const apiTypesPath = path.join(__dirname, 'src/shared/types/api.ts');
const content = fs.readFileSync(apiTypesPath, 'utf8');

// Split content into lines
const lines = content.split('\n');

// Find the start of paths interface
const pathsStart = lines.findIndex(l => l.includes('export interface paths'));
const componentsStart = lines.findIndex(l => l.includes('export interface components'));

if (pathsStart === -1 || componentsStart === -1) {
    console.error('Could not find paths or components interfaces');
    process.exit(1);
}

// Extract paths content
const pathsContent = lines.slice(pathsStart, componentsStart).join('\n');
fs.writeFileSync(path.join(__dirname, 'src/shared/types/api-paths.ts'), pathsContent);

// Extract components content
const componentsContent = lines.slice(componentsStart).join('\n');

// Parse schemas from components
const schemasMatch = componentsContent.match(/schemas: \{([\s\S]*?)\n\}/);
if (!schemasMatch) {
    console.error('Could not find schemas in components');
    process.exit(1);
}

const schemasContent = schemasMatch[1];

// Extract individual schemas
const schemas = {
    User: extractSchema(schemasContent, 'User'),
    Movie: extractSchema(schemasContent, 'Movie'),
    Cinema: extractSchema(schemasContent, 'Cinema'),
    MovieSession: extractSchema(schemasContent, 'MovieSession'),
    MovieSessionWithSeats: extractSchema(schemasContent, 'MovieSessionWithSeats'),
    MovieSessionDetails: extractSchema(schemasContent, 'MovieSessionDetails'),
    Seat: extractSchema(schemasContent, 'Seat'),
    BookedSeat: extractSchema(schemasContent, 'BookedSeat'),
    Booking: extractSchema(schemasContent, 'Booking'),
};

// Write individual schema files
writeSchemaFile('user.ts', schemas.User);
writeSchemaFile('movie.ts', schemas.Movie, schemas.MovieSession, schemas.MovieSessionWithSeats, schemas.MovieSessionDetails);
writeSchemaFile('cinema.ts', schemas.Cinema);
writeSchemaFile('booking.ts', schemas.Seat, schemas.BookedSeat, schemas.Booking);

console.log('âœ… Successfully split API types into separate files');

function extractSchema(content, schemaName) {
    const regex = new RegExp(`${schemaName}:\\s*\\{([\\s\\S]*?)\\n\\s*\\}`, 'g');
    const match = regex.exec(content);
    if (!match) return null;

    return {
        name: schemaName,
        content: match[1].trim()
    };
}

function writeSchemaFile(filename, ...schemas) {
    const filePath = path.join(__dirname, 'src/shared/types', filename);
    let content = '/**\n * This file was auto-generated by openapi-typescript.\n * Do not make direct changes to the file.\n */\n\n';

    schemas.forEach(schema => {
        if (schema) {
            content += `export interface ${schema.name} {\n${schema.content}\n}\n\n`;
        }
    });

    fs.writeFileSync(filePath, content);
}
